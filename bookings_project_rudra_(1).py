# -*- coding: utf-8 -*-
"""BOOKINGS_PROJECT_RUDRA (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wCRDaNl80xPMXqbAY-h_BDpGchmecUC8

# HOTEL BOOKINGS PROJECT
"""

import numpy as np

import pandas as pd

from matplotlib import pyplot as plt

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

import seaborn as sns

hot_book= pd.read_csv('https://raw.githubusercontent.com/Premalatha-success/Datasets/main/hotel_bookings.csv')

hot_book.head()

hot_book.isnull().sum()

# there are missing values in four columns

hot_book.describe()

hot_book.dtypes

median1= hot_book['children'].median()

median2=hot_book['company'].median()

median3= hot_book['agent'].median()

mode= hot_book['country'].mode().values[0]

hot_book['agent']=hot_book['agent'].replace(np.nan,median3)
hot_book['company']=hot_book['company'].replace(np.nan,median2)
hot_book['children']=hot_book['children'].replace(np.nan,median1)
hot_book['country']=hot_book['country'].replace(np.nan,mode)

hot_book.isnull().sum()

hot_book['reservation_status'].unique()
hot_book['customer_type'].unique()
hot_book['arrival_date_month'].unique()
hot_book['deposit_type'].unique()
hot_book['meal'].unique()
hot_book['market_segment'].unique()
hot_book['distribution_channel'].unique()

hot_book['reservation_status']=hot_book['reservation_status'].replace({'Check-Out':1,'Canceled':2,'No-Show':3})
hot_book['customer_type']=hot_book['customer_type'].replace({'Transient':1,'Contract':2,'Transient-Party':3,'Group':4})
hot_book['arrival_date_month']=hot_book['arrival_date_month'].replace({'January':1, 'February':2, 'March':3, 'April':4, 'May':5, 'June':6,'July':7, 'August':8, 'September':9, 'October':10, 'November':11, 'December':12})
hot_book['deposit_type']=hot_book['deposit_type'].replace({'No Deposit':1, 'Refundable':2, 'Non Refund':3})
hot_book['meal']=hot_book['meal'].replace({'BB':1, 'FB':2, 'HB':3, 'SC':4,'Undefined':5})
hot_book['market_segment']=hot_book['market_segment'].replace({'Direct':1, 'Corporate':2, 'Online TA':3, 'Offline TA/TO':4,'Complementary':5, 'Groups':6, 'Undefined':6, 'Aviation':7})
hot_book['distribution_channel']=hot_book['distribution_channel'].replace({'Direct':1, 'Corporate':2, 'TA/TO':3, 'Undefined':4, 'GDS':5})

from sklearn.preprocessing import LabelEncoder

labelenc= LabelEncoder()

columns=['reserved_room_type','assigned_room_type','country','hotel','reservation_status_date']
hot_book[columns]=hot_book[columns].apply(labelenc.fit_transform)

hot_book.head()

hot_book.dtypes

hot_book.head()

hot_book.head(10)

y=hot_book['is_canceled']

x=hot_book.drop(['is_canceled'],axis=1)

"""### Logistic regression model"""

from sklearn.linear_model import LogisticRegression

from sklearn.model_selection import train_test_split

lr= LogisticRegression()

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size=0.30,random_state=0)

lr.fit(x_train,y_train)

lr.score(x_train,y_train)

lr.score(x_test,y_test)

"""### Decision tree model"""

from sklearn.tree import DecisionTreeClassifier

Dtree= DecisionTreeClassifier(criterion='gini',random_state=0)

Dtree.fit(x_train,y_train)

Dtree.score(x_train,y_train)

Dtree.score(x_test,y_test)

"""## Bagging"""

from sklearn.ensemble import BaggingClassifier

bgcl= BaggingClassifier(n_estimators=50,base_estimator=Dtree,random_state=0)

bgcl=bgcl.fit(x_train,y_train)

y_pred=bgcl.predict(x_test)

bgcl.score(x_test,y_test)

from sklearn import metrics

cm=metrics.confusion_matrix(y_test,y_pred,labels=[0,1])
df_cm=pd.DataFrame(cm,index=[i for i in["no","yes"]])
plt.figure(figsize=(7,5))
sns.heatmap(df_cm,annot=True, fmt='g')

aca= metrics.accuracy_score(y_test,y_pred)
print(aca)

"""## Boosting"""

from sklearn.ensemble import AdaBoostClassifier

abcl= AdaBoostClassifier(n_estimators=50,random_state=0)

abcl.fit(x_train,y_train)

y_predb= abcl.predict(x_test)

abcl.score(x_test,y_test)

cmb=metrics.confusion_matrix(y_test,y_predb,labels=[0,1])
df_cmb=pd.DataFrame(cmb,index=[i for i in["no","yes"]])
plt.figure(figsize=(7,5))
sns.heatmap(df_cmb,annot=True, fmt='g')

acb= metrics.accuracy_score(y_test,y_predb)
print(acb)

"""## Random forest model"""

from sklearn.ensemble import RandomForestClassifier

rfcl= RandomForestClassifier(n_estimators=50,random_state=0)

rfcl.fit(x_train,y_train)

y_predc= rfcl.predict(x_test)

rfcl.score(x_test,y_test)

acc= metrics.accuracy_score(y_test,y_predc)
print(acc)